import os
import re
import lkml
import pandas as pd

def get_view_names_from_explore(base_path, explore_name, suffix='.explore.lkml'):
    full_path = os.path.join(base_path, f"{explore_name}{suffix}")
    
    try:
        with open(full_path, 'r') as file:
            lines = file.readlines()
            content = ''.join([line for line in lines if not line.strip().startswith('#')])
            
            # Use regex to find content inside square brackets after "fields:"
            match = re.search(r'fields:\s*\[([^\]]+)\]', content)
            if match:
                fields_content = match.group(1)
                # Use regex to find all terms before the dot in fields
                matches = re.findall(r'(\w+)\.', fields_content)
                views = set(matches)
                return sorted(list(views))  # Sort the results alphabetically
            else:
                print(f"No fields found in {full_path}")
                return []
    except FileNotFoundError:
        print(f"File {full_path} not found.")
        return []
    except Exception as e:
        print(f"An error occurred: {e}")
        return []

def get_all_view_names(base_path):
    view_details = []
    for root, _, files in os.walk(base_path):
        for file in files:
            if file.endswith('.view.lkml'):
                full_path = os.path.join(root, file)
                try:
                    with open(full_path, 'r') as file_obj:
                        content = file_obj.read()
                        parsed = lkml.load(content)
                        folder_path = os.path.relpath(root, base_path)
                        print(f"Parsed content from {full_path}: {parsed}")  # Debugging print
                        for view in parsed.get('views', []):
                            view_name = view.get('name')
                            if view_name.startswith('+'):
                                view_name_clean = view_name[1:]
                                view_details.append((folder_path, view_name_clean, 'refine', view_name_clean))
                            elif 'extends__all' in view:
                                extends = view.get('extends__all')
                                for extend_group in extends:
                                    for extend_view in extend_group:
                                        view_details.append((folder_path, view_name, 'extend', extend_view))
                            elif 'sql_table_name' in view:
                                view_details.append((folder_path, view_name, 'sql_table_name', None))
                            elif 'derived_table' in view:
                                view_details.append((folder_path, view_name, 'derived_table', None))
                            else:
                                view_details.append((folder_path, view_name, None, None))
                except Exception as e:
                    print(f"An error occurred while reading {full_path}: {e}")
    return view_details

def find_matching_views(base_spoke_name, spoke_names, base_path, filtered_view_details):
    matching_details = []
    for spoke_name in spoke_names:
        compare_base_path = f"D:/Git Clone/ONE_Looker/{spoke_name}"
        compare_view_details = get_all_view_names(compare_base_path)
        
        for folder_path, view_name, view_type, extended_view in filtered_view_details:
            for compare_folder_path, compare_view_name, compare_view_type, compare_extended_view in compare_view_details:
                if view_name == compare_view_name:
                    matching_details.append((
                        folder_path, base_spoke_name, view_name, view_type, extended_view,
                        compare_folder_path, spoke_name, compare_view_name, compare_view_type, compare_extended_view
                    ))
    return matching_details

def save_to_excel(data, output_path, sheet_name, columns):
    df = pd.DataFrame(data, columns=columns)
    if not os.path.exists(output_path):
        with pd.ExcelWriter(output_path, mode='w', engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name=sheet_name, index=False)
    else:
        with pd.ExcelWriter(output_path, mode='a', engine='openpyxl', if_sheet_exists='replace') as writer:
            df.to_excel(writer, sheet_name=sheet_name, index=False)

# Example usage
all_spoke_names = [
    "LOOKML_one_ap_spoke",
    "LOOKML_one_ar_spoke",
    "LOOKML_one_bkg_doc_spoke",
    "LOOKML_one_bpit_spoke",
    "LOOKML_one_oneforce_spoke",
    "LOOKML_one_ecommerce_spoke",
    "LOOKML_one_equipment_spoke",
    "LOOKML_one_hub",
    "LOOKML_one_oneforce_spoke",
    "LOOKML_one_pricing_spoke",
    "LOOKML_one_space_yield_spoke",
    "LOOKML_one_vessel_special_cargo_spoke"
]
selected_spoke = "LOOKML_one_equipment_spoke"
base_path = f"D:/Git Clone/ONE_Looker/{selected_spoke}/"
explore_name = "02_Models/EQR"
suffix = ".explore.lkml"
output_path = "D:/Git Clone/ONE_Looker/explore_check/explore_view.xlsx"
spoke_names = [spoke for spoke in all_spoke_names if spoke != selected_spoke] 

# Get view names from explore
explore_view_names = get_view_names_from_explore(base_path, explore_name, suffix)
print("Explore view names:", explore_view_names)  # Debugging print

# Get all view names and details
view_details = get_all_view_names(base_path)
print("All view details:", view_details)  # Debugging print

# Filter view details by explore view names
filtered_view_details = [detail for detail in view_details if detail[1] in explore_view_names]
print("Filtered view details:", filtered_view_details)  # Debugging print

# Find matching views in other spoke paths
base_spoke_name = base_path.rstrip('/').split('/')[-1]
matching_view_details = find_matching_views(base_spoke_name, spoke_names, base_path, filtered_view_details)
print("Matching view details:", matching_view_details)  # Debugging print

# Save view details to the first sheet
if filtered_view_details:
    save_to_excel(filtered_view_details, output_path, "View Details", ["Folder Path", "View Name", "Type", "Base/Extended View"])

# Save matching view details to the second sheet
if matching_view_details:
    save_to_excel(matching_view_details, output_path, "Matching Views", ["Folder Path", "Base Spoke Name", "View Name", "View Type", "Extended View", "Compare Folder Path", "Compare Spoke Name", "Compare View Name", "Compare View Type", "Compare Extended View"])

print(f"View names and details saved to {output_path}")